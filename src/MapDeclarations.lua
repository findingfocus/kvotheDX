require 'src/constants'

MAP = {}
OVERWORLD_MAP_WIDTH = 10
OVERWORLD_MAP_HEIGHT = 10
MAP_WIDTH = 10
MAP_HEIGHT = 8
---[[
for x = 1, OVERWORLD_MAP_HEIGHT do
    table.insert(MAP, {})
    for y = 1, OVERWORLD_MAP_WIDTH do
        table.insert(MAP[x], {})
    end
end
--]]


for x = 1, OVERWORLD_MAP_HEIGHT do
    for y = 1, OVERWORLD_MAP_WIDTH do
        for z = 1, 80 do
            random = math.random(75)
            if random == 75 then
                MAP[x][y][z] = SAND_BONE
            elseif random == 74 then
                MAP[x][y][z] = SAND_WOOD
            else
                MAP[x][y][z] = SAND
            end
        end
    end
end

MAP[1][1] = {
    TREE_TL, TREE_TR, GRASS_TE, GRASS_TE, GRASS_TE, GRASS_TE, GRASS_TE, CABINROOF_TL, CABINROOF_TC, CABINROOF_TR,
    TREE_BL, TREE_BR   , FLOWER   , GRASS   , GRASS   , GRASS   , GRASS   , CABINROOF_BL   , CABINROOF_BC , CABINROOF_BR,
    GRASS_LE, GRASS   , WOOD_FENCE   , WOOD_FENCE   , WOOD_FENCE   , GRASS   , GRASS   , CABINWALL_L   , CABINDOOR   , CABINWALL_R,
    GRASS_LE, GRASS   , WOOD_FENCE   , DIRT_PATH, DIRT_PATH, DIRT_PATH, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN,
    GRASS_LE, GRASS   , WOOD_FENCE   , DIRT_PATH   , TREE_TL   , TREE_TR   , FLOWER   , GRASS   , GRASS   , GRASS_RE,
    GRASS_LE, GRASS   , WOOD_FENCE   , DIRT_PATH   , TREE_BL   , TREE_BR   , STUMP   , GRASS   , GRASS   , GRASS_RE,
    GRASS_LE, GRASS   , WOOD_FENCE   , DIRT_PATH   , GRASS   , GRASS   , GRASS   , GRASS   , GRASS   , GRASS_RE,
    GRASS_BL, GRASS_BE, GRASS_BE, DIRT_PATH, GRASS_BE, GRASS_BE, GRASS_BE, GRASS_BE, GRASS_BE, GRASS_BR,
}

MAP[1][2] = {
    WOOD_FENCE, GRASS_FADED_TE, GRASS_FADED_TE, GRASS_FADED_TE, GRASS_FADED_TE, GRASS_FADED_TE, GRASS_FADED_TE, GRASS_FADED_TE, GRASS_FADED_TE, GRASS_FADED_TR,
    WOOD_FENCE, GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED_RE,
    WOOD_FENCE, GRASS_FADED  , FLOWER  , FLOWER  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED_RE,
    BRICK_BROWN, BRICK_BROWN  , BRICK_BROWN  , BRICK_BROWN  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED_RE,
    GRASS_FADED_LE, GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED_RE,
    GRASS_FADED_LE, GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED_RE,
    GRASS_FADED_LE, GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED  , GRASS_FADED_RE,
    GRASS_FADED_BL, GRASS_FADED_BE, GRASS_FADED_BE, GRASS_FADED_BE, GRASS_FADED_BE, GRASS_FADED_BE, GRASS_FADED_BE, GRASS_FADED_BE, GRASS_FADED_BE, GRASS_FADED_BR,
}

MAP[2][1] = {
    GRASS_ISLAND_TL, GRASS_ISLAND_TE, GRASS_ISLAND_TE, DIRT_PATH, GRASS_ISLAND_TE, GRASS_ISLAND_TE, GRASS_ISLAND_TE, GRASS_ISLAND_TE, GRASS_ISLAND_TE, GRASS_ISLAND_TR,
    GRASS_ISLAND_LE, FLOWER  , GRASS_ISLAND  , DIRT_PATH  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND_RE,
    GRASS_ISLAND_LE, GRASS_ISLAND  , GRASS_ISLAND  , DIRT_PATH  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND_RE,
    GRASS_ISLAND_LE, GRASS_ISLAND  , GRASS_ISLAND  , DIRT_PATH  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND_RE,
    GRASS_ISLAND_LE, GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND_RE,
    GRASS_ISLAND_LE, GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND_RE,
    GRASS_ISLAND_LE, GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND  , GRASS_ISLAND_RE,
    GRASS_ISLAND_BL, GRASS_ISLAND_BE, GRASS_ISLAND_BE, GRASS_ISLAND_BE, GRASS_ISLAND_BE, GRASS_ISLAND_BE, GRASS_ISLAND_BE, GRASS_ISLAND_BE, GRASS_ISLAND_BE, GRASS_ISLAND_BR,
}

MAP[2][2] = {
    BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN,
    BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN,
    BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN,
    BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN,
    BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN,
    BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN,
    BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN,
    BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN, BRICK_BROWN,
}

MAP[2][3] = {
    BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE,
    BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE,
    BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE,
    BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE,
    BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE,
    BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE,
    BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE,
    BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE, BRICK_BLUE,
}

MAP[1][3] = {
    BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED,
    BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED,
    BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED,
    BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED,
    BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED,
    BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED,
    BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED,
    BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED, BRICK_RED,
}

for i = 1, MAP_HEIGHT do
    for j = 1, MAP_WIDTH do
        MAP[i][j].animatables = {}
        MAP[i][j].entities = {}
    end
end

local entities = 1
for i = 1, entities do
    table.insert(MAP[1][2].entities, Entity {
        animations = ENTITY_DEFS['geckoC'].animations,
        x = VIRTUAL_WIDTH / 2 - 8,
        y = VIRTUAL_HEIGHT / 2 - 8,
        width = TILE_SIZE,
        height = TILE_SIZE,
        direction = 'left',
        type = 'gecko',
    })

    --MAP[1][2].entities[i].x = MAP[1][2].entities[i].x * i
    --MAP[1][2].entities[i].direction = 'up'
    --MAP[1][2].entities[i].type = 'gecko'

    MAP[1][2].entities[i].stateMachine = StateMachine {
        ['entity-walk'] = function() return EntityWalkState(MAP[1][2].entities[i]) end,
        ['entity-idle'] = function() return EntityIdleState(MAP[1][2].entities[i]) end,
    }

    MAP[1][2].entities[i]:changeState('entity-idle')
end
